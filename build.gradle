plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.1'
    id 'idea'
    id 'io.spring.dependency-management' version '1.1.6'
    id 'com.google.cloud.tools.jib' version '3.4.4'
    id "com.google.protobuf" version "0.9.4"
}

jib.from {
    image = 'gcr.io/distroless/java21'
}

group = 'rso.iota'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "2024.0.0")
}

def grpcVersion = '1.66.0'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation "io.github.resilience4j:resilience4j-spring-boot3"
    implementation "org.springframework.boot:spring-boot-starter-actuator"
    implementation "org.springframework.boot:spring-boot-starter-aop"
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation "net.devh:grpc-spring-boot-starter:3.1.0.RELEASE"

    implementation 'org.flywaydb:flyway-core:10.16.0' // Flyway for database migrations
    implementation 'org.flywaydb:flyway-database-postgresql:10.16.0' // Flyway plugin for PostgreSQL

    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.7.0'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-api:2.7.0'
    implementation 'org.springdoc:springdoc-openapi-starter-common:2.7.0'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'org.postgresql:postgresql'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'

    annotationProcessor 'org.projectlombok:lombok'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'


    implementation 'javax.annotation:javax.annotation-api:1.3.2'
    implementation 'com.google.protobuf:protobuf-java:4.28.2'
    implementation 'com.googlecode.protobuf-java-format:protobuf-java-format:1.4'
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
}


task mycopytask(type: Copy) {
    from file("rso-comms/lobby_svc.proto")
    into file("src/main/proto/")
}


protobuf {
    // Instead of using local protoc installation, use the prebuild protoc artifact provided on maven central
    protoc {
        artifact = 'com.google.protobuf:protoc:3.22.2'
    }

    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }

    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}


sourceSets {
    main {
        java {
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
        }
    }
}

// Configure the idea plugin to include the generated sources
idea {
    module {
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/grpc")
        sourceDirs += file("${projectDir}/build/generated/source/proto/main/java")
    }
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

tasks.named("extractProto") {
    dependsOn mycopytask
}

tasks.named('test') {
    useJUnitPlatform()
}
